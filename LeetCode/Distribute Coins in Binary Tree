//Statement
/*Given the root of a binary tree with N nodes, each node in the tree has node.val coins, and there are N coins total.In one move, we may choose two adjacent nodes and move one coin from one node to another.  (The move may be from parent to child, or from child to parent.)Return the number of moves required to make every node have exactly one coin.

Example 1:
Input: [3,0,0]
Output: 2
Explanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.

Example 2:
Input: [0,3,0]
Output: 3
Explanation: From the left child of the root, we move two coins to the root [taking two moves].  Then, we move one coin from the root of the tree to the right child.
*/

//Solution

class Solution {
    int moves=0;
    
    public int distributeCoins(TreeNode root) {
        solve(root);
        return moves;
    }
   int solve(TreeNode node)
   {
       if(node==null)
           return 0;
       
       int left=solve(node.left);
       int right=solve(node.right);
       
       moves+=Math.abs(left)+Math.abs(right);
     
       return node.val+left+right-1;
   }
}

//Solution Idea
/**
 * The idea is to go post order
 * and return the extra coins that it has to donate or  
 * the extra coins it needs to fulfill the condition
 * moves will store the absolute value of left+right
 * idea behind it is:
 * left and right will be storing the state of the node
 * that is, whether to donate or receive
 * So the value stored in left and right implies the
 * incoming or outgoing paths to that node
 * which will calculate to total moves.
 *
 * For Eg: Input: [0(root),3(left),0(right)]
 * Output : 3
 *
 * left child has 2 extra nodes,
 * right child is short of a coin therefore, -1
 * This means there would be 2 outgoing paths from left node 
 * and, 1 incoming path to right node
 * Intotal 2+1=3 moves would be there.
 */

