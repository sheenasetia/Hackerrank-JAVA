/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 /*
 Input: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
*/

/*
Input: 

          1
         / \
        3   2 
       /        
      5      

Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).

*/

class Solution {
    
    int max_width=0;
    HashMap<Integer,Integer> left_nodes = new HashMap<>(); 
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null)
            return 0;
        dfs(root,0,0);
        return max_width;
    }
    public void dfs(TreeNode root,int level,int position)
    {
        if(root==null)
            return;
        //left_nodes.putIfAbsent(level, position);
        if(left_nodes.get(level)==null)
            left_nodes.put(level,position);
        max_width=Math.max(max_width, position-left_nodes.get(level)+1);
        dfs(root.left,level+1,position*2);
        dfs(root.right,level+1,position*2+1);
    }
    
}
