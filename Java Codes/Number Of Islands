/*
Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically (diagnonally not allowed). You may assume all four edges of the grid are all surrounded by water.

Input:
11110
11010
11000
00000

Output: 1

Input:
11000
11000
00100
00011

Output: 3
*/

//Solution using BFS approach

package com.sheena.coding;
import java.util.Scanner;

class Solution{

	public int getNumberOfIslands(int[][] grid, int m, int n) {
		
		int count =0;
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<n;j++)
			{
				if(grid[i][j]==1)
				{
					count+=1;
					bfs(grid,i,j);
				}
			}
		}
		return count;
	}

	private void bfs(int[][] grid, int i, int j) {
		
		if(i<0 || i >= grid.length || j<0 || j >= grid[i].length || grid[i][j]==0)
			return;
		grid[i][j]=0;
		bfs(grid,i-1,j); //check up
		bfs(grid,i+1,j); //check down
		bfs(grid,i,j-1); //check left
		bfs(grid,i,j+1); //check right
	}
	
}

public class NumberOfIslands {

	public static void main(String[] args) {
		
		int m,n;
		Scanner sc=new Scanner(System.in);
		m=sc.nextInt();
		n=sc.nextInt();
		int grid[][]=new int[m][n];
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<n;j++)
			{
				grid[i][j]=sc.nextInt();
			}
		}
		sc.close();
		Solution obj= new Solution();
		System.out.println("Num of islands : "+obj.getNumberOfIslands(grid,m,n));
	}

}
