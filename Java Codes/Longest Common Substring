/* LONGEST COMMON SUBSTRING (Without DP)
   O(n^2) Time Complexity
   O(1) Space Complexity
*/

package com.sheena.coding;

import java.util.Scanner;

class LongestPalendromicSolution {
	public int expandFromMiddle(String s,int left,int right)
	{
		if(s==null || left>right)
			return 0;
		while(left >= 0 && right < s.length() && s.charAt(left)==s.charAt(right))
		{
			left--;
			right++;
		}
		/* left would have reached one less index (invalid)
		 * right would have reached one more index (invalid)
		 * Therefore, either do left+1 and right-1 at last
		 * and then , return right-left+1
		 * OR, directly do right-left-1 as shown below. 
		 */
		return right-left-1;
	}
	String getLongestPalendromic(String s)
	{
		if(s == null || s.length() < 1)
			return "";
		int start = 0;
		int end = 0;
		for(int i=0;i<s.length();i++)
		{
			//Case A : racecar
			int len1 = expandFromMiddle(s, i, i); 
			//Case B : abba
			int len2 = expandFromMiddle(s, i, i+1);
			int len = Math.max(len1, len2);
			if(len >= end - start)
			{
				start = i - ((len-1)/2);
				end = i+(len/2);
			}
		}
		return s.substring(start,end+1);
	}
}

public class LongestPalendromicSubstring {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		String str=sc.next();
		sc.close();
		LongestPalendromicSolution obj=new LongestPalendromicSolution();
		System.out.println("Longest palendromic substring : "+obj.getLongestPalendromic(str));
		
	}

}
